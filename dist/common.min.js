export const windowPromise=new Promise((t=>{window.addEventListener("load",(()=>t()))}));export function currentTheme(){return window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light"}export async function getJson(t){const s=`./dist/${t}.json`,r=await fetch(s);if(r.status>299)throw Error("Error in requesting file, status:"+r.status);const o=r.headers.get("Content-Type");if(!o||!o.startsWith("application/json"))throw Error("Invalid mime type for response, expected application/json, got "+o);return r.json()}const t=[1,1,1,.5,.5,0,1];export function orderScores(s,r){const o=[],i=t.reduce(((t,s)=>t+s),0);for(const e of r){let r=0;for(const[o,i]of e.stats.entries()){const e=t[o]??1;r+=(Math.abs(s[o]-i)/100*e)**2}o.push({...e,bias:r/i})}return o.sort(((t,s)=>t.bias-s.bias))}export function parseScores(t,s){if(!t)throw Error("No scores provided");const r=decodeURIComponent(t).split(",").map((t=>parseFloat(t))),o=r.some((t=>t>100||t<0||isNaN(t)));if(r.length!==s||o)throw Error("Invalid scores");return r}export const flagTable={popular:1};export function parseFlags(t){if(!Number.isInteger(t)||t<0)throw Error("Invalid number provided");const s={};for(const[r,o]of Object.entries(flagTable))s[r]=!!(t&o);return s}export function serializeFlags(t){let s=0;for(const[r,o]of Object.entries(flagTable))s|=t[r]?o:0;return s}export function filterByFlag(t,s){const r=parseFlags(s.flags);for(const[s,o]of Object.entries(t))if(o&&!r[s])return!1;return!0}export function parseUsers(t){return t.map((([t,s,r])=>({name:t,flags:s,stats:r})))}export function shuffleArray(t){const s=t.map((t=>t));for(const[t,r]of s.entries()){const o=Math.floor(Math.random()*s.length);[s[t],s[o]]=[s[o],r]}return s}function s(t){const s=new Image;return s.src="./assets/values/"+t,new Promise(((t,r)=>{s.addEventListener("load",(()=>t(s))),s.addEventListener("abort",r),s.addEventListener("error",r)}))}export class Canvas{t;params;constructor(t,s){t.width=s.width,t.height=s.height;const r=t.getContext("2d");if(!r)throw Error("Failed to get canvas context");this.t=r,this.params=s,this.t.fillStyle=this.params.bg,this.t.fillRect(0,0,this.params.width,this.params.height)}o(t){this.t.strokeStyle="#000",this.t.lineJoin="round",this.t.lineWidth=75,this.t.fillStyle="#222222",this.t.strokeRect(165,50+t,470,0)}i(t,s,r,o,i){const[e,n]=i?[1.5,.5]:[.5,1.5];this.t.fillStyle=o,this.t.beginPath(),this.t.arc(t,s,r,e*Math.PI,n*Math.PI),this.t.fill()}h(t,s,r){this.t.lineWidth=65;const o=220+120*r,[i,e]=t.color,[n,a]=s>98?[i,i]:s<2?[e,e]:[i,e];this.i(166,o,32,n,!1),this.i(634,o,32,a,!0);const h=s>98||s<2?6:0,c=4.82*(Math.max(Math.min(s,98),2)-2);this.t.fillStyle=n,this.t.fillRect(166,o-32,c+h,64),this.t.fillStyle=a,this.t.fillRect(172+c,o-32,464-c,64)}l(t,s,r){this.t.font=`32px '${this.params.font}', sans-serif`;const o=120*r+232.5;if(null==s||s>100||s<0)throw Error("Invalid score: "+s);const i=t.white,e=[2&i,1&i];s>20&&(this.t.fillStyle=e[0]?"#FFF":"#000",this.t.textAlign="left",this.t.fillText(s.toFixed(1)+"%",150,o)),s<80&&(this.t.fillStyle=e[1]?"#FFF":"#000",this.t.textAlign="right",this.t.fillText((100-s).toFixed(1)+"%",650,o)),this.t.fillStyle=this.params.fg,this.t.textAlign="center",this.t.font=`bold 30px '${this.params.font}', sans-serif`;const n=(a=t.name).charAt(0).toUpperCase()+a.slice(1);var a;const h=Canvas.findTier(s,t.tiers),c=`${n} Axis: ${h}`;return this.t.fillText(c,400,170+120*r,550),h}clearFields(){this.t.fillStyle=this.params.bg,this.t.fillRect(126,130,550,1e3),this.t.fillRect(0,0,800,150)}async drawValue(t,r,o,i=!0){const e=170+120*o;this.o(e),this.h(t,r,o);const n=this.l(t,r,o);if(i){const{icons:r}=t,[o,i]=await Promise.all(r.map(s));this.t.drawImage(o,20,e,100,100),this.t.drawImage(i,680,e,100,100)}return n}drawHeader(t){this.t.fillStyle=this.params.fg,this.t.font=`700 50px '${this.params.font}', sans-serif`,this.t.textAlign="left",this.t.fillText("PCBvalues",20,90),this.t.font=`30px '${this.params.font}', sans-serif`;const s=t.gallery?t.user:"Closest Match: "+t.user;this.t.fillText(s,20,130,480),this.t.textAlign="right",this.t.font=`300 25px '${this.params.font}', sans-serif`,this.t.fillText("pcbvalues.github.io",780,40),this.t.fillText(t.version,780,70),this.t.fillText(t.edition,780,100);const r=(new Date).toLocaleDateString("en-GB"),o=`${t.basetext} on ${r}`;this.t.fillText(o,780,130)}static findTier(t,s){return s[Math.floor((100-t)/100*s.length)]??s.at(-1)}static download(t){const s=document.createElement("a");s.href=t.toDataURL("image/png"),s.download="PCBValues.png",s.click(),s.remove()}}