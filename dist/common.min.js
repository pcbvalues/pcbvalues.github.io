export const windowPromise=new Promise((t=>{window.addEventListener("load",(()=>t()))}));export function currentTheme(){return window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light"}export async function getJson(t){const s=`./dist/${t}.json`,i=await fetch(s);if(i.status>299)throw Error("Error in requesting file, status:"+i.status);const e=i.headers.get("Content-Type");if(!e||!e.startsWith("application/json"))throw Error("Invalid mime type for response, expected application/json, got "+e);return i.json()}export function parseScores(t,s){const i=decodeURIComponent(t).split(",").map((t=>parseFloat(t))),e=i.some((t=>t>100||t<0||isNaN(t)));if(i.length!==s||e)throw Error("Invalid scores");return i}function t(t){const s=new Image;return s.src="./assets/values/"+t,new Promise(((t,i)=>{s.addEventListener("load",(()=>t(s))),s.addEventListener("abort",i),s.addEventListener("error",i)}))}export class Canvas{ctx;params;constructor(t,s){t.width=s.width,t.height=s.height;const i=t.getContext("2d");if(!i)throw Error("Failed to get canvas context");this.ctx=i,this.params=s,this.ctx.fillStyle=this.params.bg,this.ctx.fillRect(0,0,this.params.width,this.params.height)}drawValueBg(t){this.ctx.strokeStyle="#000",this.ctx.lineJoin="round",this.ctx.lineWidth=75,this.ctx.fillStyle="#222222",this.ctx.strokeRect(165,50+t,470,0)}drawHalfCircle(t,s,i,e,r){const[a,c]=r?[1.5,.5]:[.5,1.5];this.ctx.fillStyle=e,this.ctx.beginPath(),this.ctx.arc(t,s,i,a*Math.PI,c*Math.PI),this.ctx.fill()}drawScoreRect(t,s,i){this.ctx.lineWidth=65;const e=220+120*i;let[r,a]=t.color;const[c,l]=s>98?[r,r]:s<2?[a,a]:[r,a];this.drawHalfCircle(166,e,32,c,!1),this.drawHalfCircle(634,e,32,l,!0);const n=s>98||s<2?6:0,o=4.82*(Math.max(Math.min(s,98),2)-2);this.ctx.fillStyle=c,this.ctx.fillRect(166,e-32,o+n,64),this.ctx.fillStyle=l,this.ctx.fillRect(172+o,e-32,464-o,64)}drawScoreLabel(t,s,i){this.ctx.font=`32px '${this.params.font}', sans-serif`;const e=120*i+232.5;if(null==s||s>100||s<0)throw Error("Invalid score: "+s);const r=t.white,a=[2&r,1&r];s>20&&(this.ctx.fillStyle=a[0]?"#FFF":"#000",this.ctx.textAlign="left",this.ctx.fillText(s.toFixed(1)+"%",150,e)),s<80&&(this.ctx.fillStyle=a[1]?"#FFF":"#000",this.ctx.textAlign="right",this.ctx.fillText((100-s).toFixed(1)+"%",650,e)),this.ctx.fillStyle=this.params.fg,this.ctx.textAlign="center",this.ctx.font=`bold 30px '${this.params.font}', sans-serif`;const c=(l=t.name).charAt(0).toUpperCase()+l.slice(1);var l;const n=Canvas.findTier(s,t.tiers),o=`${c} Axis: ${n}`;return this.ctx.fillText(o,400,170+120*i,550),n}clearFields(){this.ctx.fillStyle=this.params.bg,this.ctx.fillRect(126,130,550,1e3),this.ctx.fillRect(0,0,800,150)}async drawValue(s,i,e,r=!0){const a=170+120*e;this.drawValueBg(a),this.drawScoreRect(s,i,e);const c=this.drawScoreLabel(s,i,e);if(r){const{icons:i}=s,[e,r]=await Promise.all(i.map(t));this.ctx.drawImage(e,20,a,100,100),this.ctx.drawImage(r,680,a,100,100)}return c}drawHeader(t){this.ctx.fillStyle=this.params.fg,this.ctx.font=`700 50px '${this.params.font}', sans-serif`,this.ctx.textAlign="left",this.ctx.fillText("PCBValues",20,90),this.ctx.font=`30px '${this.params.font}', sans-serif`;const s=t.gallery?t.user:"Closest match: "+t.user;this.ctx.fillText(s,20,130,700),this.ctx.textAlign="right",this.ctx.font=`300 25px '${this.params.font}', sans-serif`,this.ctx.fillText("pcbvalues.github.io",780,40),this.ctx.fillText(t.version,780,70),this.ctx.fillText(t.edition,780,100)}static findTier(t,s){return s[Math.floor((100-t)/100*s.length)]??s.at(-1)}static download(t){const s=document.createElement("a");s.href=t.toDataURL("image/png"),s.download="PCBValues.png",s.click(),s.remove()}}