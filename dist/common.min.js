export const windowPromise=new Promise((t=>{window.addEventListener("load",(()=>t()))}));export function currentTheme(){return window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light"}export async function getJson(t){const s=`./dist/${t}.json`,r=await fetch(s);if(r.status>299)throw Error("Error in requesting file, status:"+r.status);const i=r.headers.get("Content-Type");if(!i||!i.startsWith("application/json"))throw Error("Invalid mime type for response, expected application/json, got "+i);return r.json()}const t=[1,1,1,.5,.5,0,1];export function orderScores(s,r){const i=[],o=t.reduce(((t,s)=>t+s),0);for(const e of r){let r=0;for(const[i,o]of e.stats.entries()){const e=t[i]??1;r+=(Math.abs(s[i]-o)/100*e)**2}i.push({...e,bias:r/o})}return i.sort(((t,s)=>t.bias-s.bias))}export function parseScores(t,s){if(!t)throw Error("No scores provided");const r=decodeURIComponent(t).split(",").map((t=>parseFloat(t))),i=r.some((t=>t>100||t<0||isNaN(t)));if(r.length!==s||i)throw Error("Invalid scores");return r}const s={popular:1};export function parseFlags(t){if(!Number.isInteger(t)||t<0)throw Error("Invalid number provided");const r={};for(const[i,o]of Object.entries(s))r[i]=!!(t&o);return r}export function parseUsers(t){return t.map((([t,s,r])=>({name:t,flags:s,stats:r})))}export function shuffleArray(t){const s=t.map((t=>t));for(const[t,r]of s.entries()){const i=Math.floor(Math.random()*s.length);[s[t],s[i]]=[s[i],r]}return s}function r(t){const s=new Image;return s.src="./assets/values/"+t,new Promise(((t,r)=>{s.addEventListener("load",(()=>t(s))),s.addEventListener("abort",r),s.addEventListener("error",r)}))}export class Canvas{t;params;constructor(t,s){t.width=s.width,t.height=s.height;const r=t.getContext("2d");if(!r)throw Error("Failed to get canvas context");this.t=r,this.params=s,this.t.fillStyle=this.params.bg,this.t.fillRect(0,0,this.params.width,this.params.height)}i(t){this.t.strokeStyle="#000",this.t.lineJoin="round",this.t.lineWidth=75,this.t.fillStyle="#222222",this.t.strokeRect(165,50+t,470,0)}o(t,s,r,i,o){const[e,n]=o?[1.5,.5]:[.5,1.5];this.t.fillStyle=i,this.t.beginPath(),this.t.arc(t,s,r,e*Math.PI,n*Math.PI),this.t.fill()}h(t,s,r){this.t.lineWidth=65;const i=220+120*r,[o,e]=t.color,[n,h]=s>98?[o,o]:s<2?[e,e]:[o,e];this.o(166,i,32,n,!1),this.o(634,i,32,h,!0);const a=s>98||s<2?6:0,c=4.82*(Math.max(Math.min(s,98),2)-2);this.t.fillStyle=n,this.t.fillRect(166,i-32,c+a,64),this.t.fillStyle=h,this.t.fillRect(172+c,i-32,464-c,64)}l(t,s,r){this.t.font=`32px '${this.params.font}', sans-serif`;const i=120*r+232.5;if(null==s||s>100||s<0)throw Error("Invalid score: "+s);const o=t.white,e=[2&o,1&o];s>20&&(this.t.fillStyle=e[0]?"#FFF":"#000",this.t.textAlign="left",this.t.fillText(s.toFixed(1)+"%",150,i)),s<80&&(this.t.fillStyle=e[1]?"#FFF":"#000",this.t.textAlign="right",this.t.fillText((100-s).toFixed(1)+"%",650,i)),this.t.fillStyle=this.params.fg,this.t.textAlign="center",this.t.font=`bold 30px '${this.params.font}', sans-serif`;const n=(h=t.name).charAt(0).toUpperCase()+h.slice(1);var h;const a=Canvas.findTier(s,t.tiers),c=`${n} Axis: ${a}`;return this.t.fillText(c,400,170+120*r,550),a}clearFields(){this.t.fillStyle=this.params.bg,this.t.fillRect(126,130,550,1e3),this.t.fillRect(0,0,800,150)}async drawValue(t,s,i,o=!0){const e=170+120*i;this.i(e),this.h(t,s,i);const n=this.l(t,s,i);if(o){const{icons:s}=t,[i,o]=await Promise.all(s.map(r));this.t.drawImage(i,20,e,100,100),this.t.drawImage(o,680,e,100,100)}return n}drawHeader(t){this.t.fillStyle=this.params.fg,this.t.font=`700 50px '${this.params.font}', sans-serif`,this.t.textAlign="left",this.t.fillText("PCBvalues",20,90),this.t.font=`30px '${this.params.font}', sans-serif`;const s=t.gallery?t.user:"Closest Match: "+t.user;this.t.fillText(s,20,130,480),this.t.textAlign="right",this.t.font=`300 25px '${this.params.font}', sans-serif`,this.t.fillText("pcbvalues.github.io",780,40),this.t.fillText(t.version,780,70),this.t.fillText(t.edition,780,100);const r=(new Date).toLocaleDateString("en-GB"),i=`${t.basetext} on ${r}`;this.t.fillText(i,780,130)}static findTier(t,s){return s[Math.floor((100-t)/100*s.length)]??s.at(-1)}static download(t){const s=document.createElement("a");s.href=t.toDataURL("image/png"),s.download="PCBValues.png",s.click(),s.remove()}}